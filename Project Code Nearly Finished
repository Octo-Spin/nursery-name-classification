# Semester: CMSC - 5333-01 Spring 2022
# REFERENCES
# OrdinalEncoder:
# https://datascience.stackexchange.com/questions/72343/encoding-with-ordinalencoder-how-to-give-levels-as-user-input
# https://www.datacamp.com/community/tutorials/decision-tree-classification-python
# https://scikit-learn.org/stable/modules/tree.html
# https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OrdinalEncoder.html
# Advice and encouragement from David Burris


import pandas as pd
from sklearn import metrics
from sklearn.preprocessing import OrdinalEncoder
from sklearn.tree import DecisionTreeClassifier

# Pulling the Training Data from the CSV file
hhgx = "D:\Project\-nursery-train.data"
hhgy = "D:\Project\-nursery-test-labeled.data"
hhgz = "D:\Project\-nursery-test.data"
dfx = pd.read_csv(hhgx)
dfy = pd.read_csv(hhgy)
dfz = pd.read_csv(hhgz)

# Labeling Training and Testing Columns
dfx.columns = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health', 'result']
dfy.columns = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health', 'result']
dfz.columns = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health']

# Converting Training and Test String to Numbers
enc = OrdinalEncoder()
dfx = pd.DataFrame(enc.fit_transform(dfx))
dfy = pd.DataFrame(enc.transform(dfy))
dfx.columns = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health', 'result']
dfy.columns = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health', 'result']

# Converting Predicting Test String to Numbers
encz = OrdinalEncoder()
dfz = pd.DataFrame(encz.fit_transform(dfz))
dfz.columns = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health']

# Training
train_values = dfx.drop('result', axis=1)
train_results = dfx['result']

tree = DecisionTreeClassifier()
tree.fit(train_values, train_results)

# Prediction with labeled Test
test_values = dfy.drop('result', axis=1)
test_results = dfy['result']

test = tree.predict(test_values)

# Accuracy with Labeled Test
print("Accuracy: ", metrics.accuracy_score(test_results, test))

# Test without Labels
test = tree.predict(dfz)
dfz['8'] = test
dfz = pd.DataFrame(enc.inverse_transform(dfz))
dfz.columns = ['parents', 'has_nurs', 'form', 'children', 'housing', 'finance', 'social', 'health', 'result']
